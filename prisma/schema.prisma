// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
    id          Int @id @default(autoincrement())

    email       String @unique
    password    String

    username    String
    fullname    String?

//    tasks       Task[]
    flows       Flow[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("users")
}


model Flow {
    id          Int @id @default(autoincrement())
    title       String

    user        User @relation(fields: [userId], references: [id])
    userId      Int

    tasks       Task[]

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("flows")
}

model Task {
    id          Int @id @default(autoincrement())

//    user        User @relation(fields: [userId], references: [id])
//    userId      Int

    flow        Flow @relation(fields: [flowId], references: [id])
    flowId      Int

    action      String //Прочитати
    how_many    Int //10
    unit        String //Сторінок

    reward      Int

    days        DaysOnTasks[]
    done        Boolean    @default(false)

    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt

    @@map("tasks")
}

model Day {
    id          Int @id @default(autoincrement())
    value       String

    tasks       DaysOnTasks[]

    @@map("days")
}

model DaysOnTasks {
  task       Task     @relation(fields: [taskId], references: [id])
  taskId     Int // relation scalar field (used in the `@relation` attribute above)

  day        Day @relation(fields: [dayId], references: [id])
  dayId      Int // relation scalar field (used in the `@relation` attribute above)

  assignedAt DateTime @default(now())
  assignedBy String

  @@id([taskId, dayId])
}

